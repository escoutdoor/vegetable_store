// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: vegetable/v1/service.proto

package vegetable

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	VegetableService_CreateVegetable_FullMethodName       = "/vegetable.v1.VegetableService/CreateVegetable"
	VegetableService_DeleteVegetable_FullMethodName       = "/vegetable.v1.VegetableService/DeleteVegetable"
	VegetableService_GetVegetable_FullMethodName          = "/vegetable.v1.VegetableService/GetVegetable"
	VegetableService_ListVegetables_FullMethodName        = "/vegetable.v1.VegetableService/ListVegetables"
	VegetableService_UpdateVegetable_FullMethodName       = "/vegetable.v1.VegetableService/UpdateVegetable"
	VegetableService_BatchUpdateVegetables_FullMethodName = "/vegetable.v1.VegetableService/BatchUpdateVegetables"
)

// VegetableServiceClient is the client API for VegetableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VegetableServiceClient interface {
	CreateVegetable(ctx context.Context, in *CreateVegetableRequest, opts ...grpc.CallOption) (*CreateVegetableResponse, error)
	DeleteVegetable(ctx context.Context, in *DeleteVegetableRequest, opts ...grpc.CallOption) (*DeleteVegetableResponse, error)
	GetVegetable(ctx context.Context, in *GetVegetableRequest, opts ...grpc.CallOption) (*GetVegetableResponse, error)
	ListVegetables(ctx context.Context, in *ListVegetablesRequest, opts ...grpc.CallOption) (*ListVegetablesResponse, error)
	UpdateVegetable(ctx context.Context, in *UpdateVegetableRequest, opts ...grpc.CallOption) (*UpdateVegetableResponse, error)
	BatchUpdateVegetables(ctx context.Context, in *BatchUpdateVegetablesRequest, opts ...grpc.CallOption) (*BatchUpdateVegetablesResponse, error)
}

type vegetableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVegetableServiceClient(cc grpc.ClientConnInterface) VegetableServiceClient {
	return &vegetableServiceClient{cc}
}

func (c *vegetableServiceClient) CreateVegetable(ctx context.Context, in *CreateVegetableRequest, opts ...grpc.CallOption) (*CreateVegetableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateVegetableResponse)
	err := c.cc.Invoke(ctx, VegetableService_CreateVegetable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vegetableServiceClient) DeleteVegetable(ctx context.Context, in *DeleteVegetableRequest, opts ...grpc.CallOption) (*DeleteVegetableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteVegetableResponse)
	err := c.cc.Invoke(ctx, VegetableService_DeleteVegetable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vegetableServiceClient) GetVegetable(ctx context.Context, in *GetVegetableRequest, opts ...grpc.CallOption) (*GetVegetableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetVegetableResponse)
	err := c.cc.Invoke(ctx, VegetableService_GetVegetable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vegetableServiceClient) ListVegetables(ctx context.Context, in *ListVegetablesRequest, opts ...grpc.CallOption) (*ListVegetablesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListVegetablesResponse)
	err := c.cc.Invoke(ctx, VegetableService_ListVegetables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vegetableServiceClient) UpdateVegetable(ctx context.Context, in *UpdateVegetableRequest, opts ...grpc.CallOption) (*UpdateVegetableResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateVegetableResponse)
	err := c.cc.Invoke(ctx, VegetableService_UpdateVegetable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vegetableServiceClient) BatchUpdateVegetables(ctx context.Context, in *BatchUpdateVegetablesRequest, opts ...grpc.CallOption) (*BatchUpdateVegetablesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BatchUpdateVegetablesResponse)
	err := c.cc.Invoke(ctx, VegetableService_BatchUpdateVegetables_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VegetableServiceServer is the server API for VegetableService service.
// All implementations must embed UnimplementedVegetableServiceServer
// for forward compatibility.
type VegetableServiceServer interface {
	CreateVegetable(context.Context, *CreateVegetableRequest) (*CreateVegetableResponse, error)
	DeleteVegetable(context.Context, *DeleteVegetableRequest) (*DeleteVegetableResponse, error)
	GetVegetable(context.Context, *GetVegetableRequest) (*GetVegetableResponse, error)
	ListVegetables(context.Context, *ListVegetablesRequest) (*ListVegetablesResponse, error)
	UpdateVegetable(context.Context, *UpdateVegetableRequest) (*UpdateVegetableResponse, error)
	BatchUpdateVegetables(context.Context, *BatchUpdateVegetablesRequest) (*BatchUpdateVegetablesResponse, error)
	mustEmbedUnimplementedVegetableServiceServer()
}

// UnimplementedVegetableServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedVegetableServiceServer struct{}

func (UnimplementedVegetableServiceServer) CreateVegetable(context.Context, *CreateVegetableRequest) (*CreateVegetableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVegetable not implemented")
}
func (UnimplementedVegetableServiceServer) DeleteVegetable(context.Context, *DeleteVegetableRequest) (*DeleteVegetableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteVegetable not implemented")
}
func (UnimplementedVegetableServiceServer) GetVegetable(context.Context, *GetVegetableRequest) (*GetVegetableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVegetable not implemented")
}
func (UnimplementedVegetableServiceServer) ListVegetables(context.Context, *ListVegetablesRequest) (*ListVegetablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListVegetables not implemented")
}
func (UnimplementedVegetableServiceServer) UpdateVegetable(context.Context, *UpdateVegetableRequest) (*UpdateVegetableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateVegetable not implemented")
}
func (UnimplementedVegetableServiceServer) BatchUpdateVegetables(context.Context, *BatchUpdateVegetablesRequest) (*BatchUpdateVegetablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchUpdateVegetables not implemented")
}
func (UnimplementedVegetableServiceServer) mustEmbedUnimplementedVegetableServiceServer() {}
func (UnimplementedVegetableServiceServer) testEmbeddedByValue()                          {}

// UnsafeVegetableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VegetableServiceServer will
// result in compilation errors.
type UnsafeVegetableServiceServer interface {
	mustEmbedUnimplementedVegetableServiceServer()
}

func RegisterVegetableServiceServer(s grpc.ServiceRegistrar, srv VegetableServiceServer) {
	// If the following call pancis, it indicates UnimplementedVegetableServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&VegetableService_ServiceDesc, srv)
}

func _VegetableService_CreateVegetable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVegetableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VegetableServiceServer).CreateVegetable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VegetableService_CreateVegetable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VegetableServiceServer).CreateVegetable(ctx, req.(*CreateVegetableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VegetableService_DeleteVegetable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteVegetableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VegetableServiceServer).DeleteVegetable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VegetableService_DeleteVegetable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VegetableServiceServer).DeleteVegetable(ctx, req.(*DeleteVegetableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VegetableService_GetVegetable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVegetableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VegetableServiceServer).GetVegetable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VegetableService_GetVegetable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VegetableServiceServer).GetVegetable(ctx, req.(*GetVegetableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VegetableService_ListVegetables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListVegetablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VegetableServiceServer).ListVegetables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VegetableService_ListVegetables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VegetableServiceServer).ListVegetables(ctx, req.(*ListVegetablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VegetableService_UpdateVegetable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateVegetableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VegetableServiceServer).UpdateVegetable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VegetableService_UpdateVegetable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VegetableServiceServer).UpdateVegetable(ctx, req.(*UpdateVegetableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _VegetableService_BatchUpdateVegetables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchUpdateVegetablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VegetableServiceServer).BatchUpdateVegetables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: VegetableService_BatchUpdateVegetables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VegetableServiceServer).BatchUpdateVegetables(ctx, req.(*BatchUpdateVegetablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// VegetableService_ServiceDesc is the grpc.ServiceDesc for VegetableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VegetableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vegetable.v1.VegetableService",
	HandlerType: (*VegetableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateVegetable",
			Handler:    _VegetableService_CreateVegetable_Handler,
		},
		{
			MethodName: "DeleteVegetable",
			Handler:    _VegetableService_DeleteVegetable_Handler,
		},
		{
			MethodName: "GetVegetable",
			Handler:    _VegetableService_GetVegetable_Handler,
		},
		{
			MethodName: "ListVegetables",
			Handler:    _VegetableService_ListVegetables_Handler,
		},
		{
			MethodName: "UpdateVegetable",
			Handler:    _VegetableService_UpdateVegetable_Handler,
		},
		{
			MethodName: "BatchUpdateVegetables",
			Handler:    _VegetableService_BatchUpdateVegetables_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vegetable/v1/service.proto",
}
